Célok:
	- iptables szabályok, set mark
	- zonazas
	- grafikus GTK felulet
Később:
	- automatikus tűzfalazás (portscan detect, break-in-attempt detect).

	main 	-  processing
Gtimer		polling
	|						|
	V						V
Gui			<-	callback
	|						|
	V						V
Got			->	Accept or Drop:

TODO:
 - input connection handling (phx_data_extract IN-OUTBOUND-ra figyelni!) KÉSZ
  - hogyan: bejövő kapcsolatokat engedni programokra, bejövő lista  KÉSZ
 - /proc/net/tcp6 támogatás (elég csak az ipv4-es címeket nézni). KÉSZ
  - bejövő kapcsolatok tcp6-os problémáját megnézni! KÉSZ
 - Vuze tesztelés, tcp6 connection timeoutok megnézése jobban
 - dialógusablak kicsit erősebb jelenléte -> saját dialógusablak írása.
	- daemon-client modell után, client feladata
 - szabályok átgondolása: DROP,ACCEPT,REJECT, mikor, hogyan
 - eventlog - vagy vmilyen logging modell.
 - daemon-client modell KÉSZ
 - zónázás
 - performancia javítás részletesen KÉSZ
  - tesztelés: connection burst
 - inotify a processekre, amik meg vannak jegyezve pid alapján, ha a process bejegyzés megszünik
   a /proc-ban, akkor törölni.
 - UDP kapcsolatok: szívás lesz, esetleg on-the-fly iptables szabály generálás?
 - reverse dns lookup + dns caching -> lehet, hogy elég, ha csak a gui nézi?

Koncepció:
 - zona - program - instance
   - zonat iptartomany,
   - programot programnév, 
   - instance-t programnév,pid páros
  - azonosíto
 - zona: az elején beállítani
 - rule: zonához instance vagy program és direction
 - applist:
  - struct apprule
     - char* appname
     - int pid
     - int direction
     - int verdict -> or verdict has direction?  
 - zona->zone_id
  - verdictek: ACCEPT,ACCEPT_INST,ACCEPT_CONN,DENIED,DENIED_INST,DENIED_CONN

